@{ 

    Layout = "~/Views/Shared/_LayoutDash.cshtml";

}

@model ClearChoice.Model.Experiencia
<!DOCTYPE html>
<html>
<head>
    <title>Personal Choice</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <link href="~/Content/landing-page.min.css" rel="stylesheet" />
    <link href="~/Content/all.min.css" rel="stylesheet" />
    <link href="~/Content/simple-line-icons.css" rel="stylesheet" />
    <link href="~/Content/theme-default.css" rel="stylesheet" />
    <link href="~/Content/animate/animate.css" rel="stylesheet" />
    <style>
         /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
         #map {
             height: 75%;
             width: 50%;
             margin-left: 420px;
             margin-top: 200px;
             
         }
         /* Optional: Makes the sample page fill the window. */
         html, body {
             height: 100%;
             margin: 0;
             padding: 0;
             
         }

         .controls {
             margin-top: 100px;
             border: 1px solid transparent;
             border-radius: 2px 0 0 2px;
             box-sizing: border-box;
             -moz-box-sizing: border-box;
             height: 32px;
             outline: none;
             box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
         }

         #origin-input,
         #destination-input {
             background-color: #fff;
             font-family: Roboto;
             font-size: 15px;
             font-weight: 300;
             margin-left: 12px;
             padding: 0 11px 0 13px;
             text-overflow: ellipsis;
             width: 200px;
         }

             #origin-input:focus,
             #destination-input:focus {
                 border-color: #4d90fe;
             }

         #mode-selector {
             color: #fff;
             background-color: #4d90fe;
             margin-left: 12px;
             padding: 5px 11px 0px 11px;
         }

             #mode-selector label {
                 font-family: Roboto;
                 font-size: 13px;
                 font-weight: 300;
             }
    </style>
</head>
<body>
    @Html.BeginForm("DetalheExperiencia", "Experiencia", FormMethod.Post, new { @class = "form-horizontal" }){ 
    <main class="app-content">
        <div class="app-title">
            <div>
                <h1><i class="fa fa-suitcase"></i> Experiências</h1>
                <p>Seção de experiências, como administrador você tem a opção de cadastrar novas experiências...</p>
            </div>
            <ul class="app-breadcrumb breadcrumb">
                <li class="breadcrumb-item"><i class="fa fa-home fa-lg"></i></li>
                <li class="breadcrumb-item"><a href="#">Experiências</a></li>
            </ul>
        </div>

        <section class="showcase">
            <div class="container-fluid p-0">
                <div class="row no-gutters">
                    <div class="col-lg-6 text-white showcase-img" style="background-image: url('../../Image/bg-masthead.jpg');"></div>
                    <div class="col-lg-6 my-auto showcase-text">
                        <h2>@Model.NomeExperiencia</h2>
                        <p class="lead mb-0">@Model.Descricao</p>
                    </div>
                </div>
            </div>
           
        </section>

        <button type="submit" class="btn btn-success" formmethod="post" data-box="#message-box-success">Cadastrar</button>
        @{
            if (TempData["success"] != null) {
            <div class="message-box message-box-success animated fadeIn" id="message-box-success">
                <div class="mb-container">
                    <div class="mb-middle">
                        <div class="mb-title"><span class="fa fa-check"></span> Success</div>
                        <div class="mb-content">
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at tellus sed mauris mollis pellentesque nec a ligula. Quisque ultricies eleifend lacinia. Nunc luctus quam pretium massa semper tincidunt. Praesent vel mollis eros. Fusce erat arcu, feugiat ac dignissim ac, aliquam sed urna. Maecenas scelerisque molestie justo, ut tempor nunc.</p>
                        </div>
                        <div class="mb-footer">
                            <button class="btn btn-default btn-lg pull-right mb-control-close">Close</button>
                        </div>
                    </div>
                </div>
            </div>
                }
            }
        <input id="origin-input" class="controls" type="text"
               placeholder="Enter an origin location" value="@Model.Cidade">

        <input id="destination-input" class="controls" type="text"
               placeholder="Enter a destination location" />

        <div id="mode-selector" class="controls">
            <input type="radio" name="type" id="changemode-walking" checked="checked">
            <label for="changemode-walking">Walking</label>

            <input type="radio" name="type" id="changemode-transit">
            <label for="changemode-transit">Transit</label>

            <input type="radio" name="type" id="changemode-driving">
            <label for="changemode-driving">Driving</label>
        </div>

        <div id="map"></div>

</main>
    }

        
    


    <script src="~/Scripts/jquery.noty.js"></script>

        <script>
            // This example requires the Places library. Include the libraries=places
            // parameter when you first load the API. For example:
            // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

            function initMap() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    mapTypeControl: false,
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 13
                });

                new AutocompleteDirectionsHandler(map);
            }


            function AutocompleteDirectionsHandler(map) {
                this.map = map;
                this.originPlaceId = null;
                this.destinationPlaceId = null;
                this.travelMode = 'WALKING';
                var originInput = document.getElementById('origin-input');
                var destinationInput = document.getElementById('destination-input');
                var modeSelector = document.getElementById('mode-selector');
                this.directionsService = new google.maps.DirectionsService;
                this.directionsDisplay = new google.maps.DirectionsRenderer;
                this.directionsDisplay.setMap(map);

                var originAutocomplete = new google.maps.places.Autocomplete(
                    originInput, { placeIdOnly: true });
                var destinationAutocomplete = new google.maps.places.Autocomplete(
                    destinationInput, { placeIdOnly: true });

                this.setupClickListener('changemode-walking', 'WALKING');
                this.setupClickListener('changemode-transit', 'TRANSIT');
                this.setupClickListener('changemode-driving', 'DRIVING');

                this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
                this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

                this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
                this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
                this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
            }

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            AutocompleteDirectionsHandler.prototype.setupClickListener = function (id, mode) {
                var radioButton = document.getElementById(id);
                var me = this;
                radioButton.addEventListener('click', function () {
                    me.travelMode = mode;
                    me.route();
                });
            };

            AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
                var me = this;
                autocomplete.bindTo('bounds', this.map);
                autocomplete.addListener('place_changed', function () {
                    var place = autocomplete.getPlace();
                    if (!place.place_id) {
                        window.alert("Please select an option from the dropdown list.");
                        return;
                    }
                    if (mode === 'ORIG') {
                        me.originPlaceId = place.place_id;
                    } else {
                        me.destinationPlaceId = place.place_id;
                    }
                    me.route();
                });

            };

            AutocompleteDirectionsHandler.prototype.route = function () {
                if (!this.originPlaceId || !this.destinationPlaceId) {
                    return;
                }
                var me = this;

                this.directionsService.route({
                    origin: { 'placeId': this.originPlaceId },
                    destination: { 'placeId': this.destinationPlaceId },
                    travelMode: this.travelMode
                }, function (response, status) {
                    if (status === 'OK') {
                        me.directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            };

        </script>
        <script src=""
                async defer></script>
</body>
</html>